body {
    font-size: 18px;
}

.globalContainer {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
    background-image: linear-gradient(0deg, var(--background1) 5%, var(--background2) 92%);
    background-attachment: fixed;
}

// selected content
*::selection {
    color: #fff;
    background-color: var(--primary_medium);
    text-shadow: none;
}

// initial colors
html {
    --primary_light: #84ff71;
    --primary: #41fe3a;
    --primary_dim: #53bb53;
    --primary_medium: #44b425;
    --primary_almost-medium: #368636;
    --primary_half-medium: #1f5f08;
    --primary_dark: #123b03;
    --background1: #8BC174;
    --background2: #C7FFB8;
    --white: #fff;
    --black: #000;
}

// width
$maxWidthForMixin: 1920;
$minWidth: 100;
$textSize: 18;
$minTextSize: 12;
$startScaleAppMarginHorizontal: 300;
$sizeAppPaddingHorizontal: 15;

* {
    --content-width: 780px;
}


// mixins
@mixin no-select {
    -ms-user-select: none;
    -webkit-touch-callout: none;
    -moz-user-select: none;
    -webkit-user-select: none;
    user-select: none;
}

@mixin adaptiveWidth($property, $maxWidthViewport, $minWidthViewport, $startSize, $endSize, $unit, $type) {
    // $property: string - property name in css format
    // $maxWidthViewport: number - width of the viewport(in pixels) at which scaling begins. With $maxWidthViewport size of $property corresponds to $startSize
    // $minWidthViewport: number - width of the viewport(in pixels) at which scaling ends. With $minWidthViewport size of $property corresponds to $endSize
    // $startSize: number - size of $property at viewport size $maxWidthViewport
    // $endSize: number - size of $property at viewport size $minWidthViewport
    // $unit: string - unit for $property
    // $type: number - mixin operation mode

    $addSize: $startSize - $endSize;
    @if $type==1 {
        // only if is less container
        #{$property}: $startSize + $unit;
        @media (max-width: #{$maxWidthViewport + $unit}) {
            #{$property}: calc(#{$endSize + $unit} + #{$addSize} * ((100vw - #{$minWidthViewport}px) / #{$maxWidthViewport - $minWidthViewport}));
        }
    } @else if $type==2 {
        // only if is more container
        #{$property}: $startSize + $unit;
        @media (min-width: #{$maxWidthViewport + $unit}) {
            #{$property}: calc(#{$endSize + $unit} + #{$addSize} * ((100vw - #{$minWidthViewport}px) / #{$maxWidthForMixin - $minWidthViewport}));
        }
    } @else {
        // always
        #{$property}: calc(#{$endSize + $unit} + #{$addSize} * ((100vw - #{$minWidthViewport}px) / #{$maxWidthForMixin - $minWidthViewport}));
    }
}


// hide default background color on click
* {
    -webkit-tap-highlight-color: rgba(255, 255, 255, 0);
    -webkit-tap-highlight-color: transparent;
}
